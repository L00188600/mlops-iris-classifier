# .github/workflows/ci-cd.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Specify your Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8 linter
        run: |
          flake8 app scripts tests

      - name: Run pytest tests
        env:
          PYTHONPATH: . # THIS IS THE ADDED LINE
        run: |
          pytest tests/test_model_api.py
          pytest tests/test_preprocessing.py

  build-and-push-docker:
    needs: build-and-test # This job depends on build-and-test passing
    runs-on: ubuntu-latest
    environment: production # Use a GitHub environment for secrets management

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (GCR/GKE/Compute)
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Google Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker

      - name: Build and push Docker image to Google Container Registry
        env:
          IMAGE_NAME: mlops-iris-classifier
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          docker build -t gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA -f app/Dockerfile .
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA

  deploy:
    needs: build-and-push-docker # This job depends on build-and-push-docker passing
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (GCR/GKE/Compute)
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          project_id: '${{ secrets.GCP_PROJECT_ID }}'

      - name: Set up Google Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Deploy to Google Cloud VM
        env:
          VM_INSTANCE_NAME: ${{ secrets.VM_INSTANCE_NAME }}
          GCP_ZONE: ${{ secrets.GCP_ZONE }}
          VM_USER: ${{ secrets.VM_USER }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          IMAGE_NAME: mlops-iris-classifier
        run: |
          # Add the private SSH key to the SSH agent
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | ssh-add -

          # Ensure strict host key checking is off for CI/CD for first connection or if VM reboots
          # In production, consider pre-adding host keys or more robust host key management
          SSH_OPTIONS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

          # Transfer and execute deployment script on the VM
          gcloud compute ssh ${VM_USER}@${VM_INSTANCE_NAME} --zone=${GCP_ZONE} ${SSH_OPTIONS} --project=${PROJECT_ID} --tunnel-through-iap --command="
            # Ensure Docker is installed and running
            sudo apt-get update && sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker

            # Authenticate Docker to Google Container Registry
            sudo gcloud auth configure-docker --quiet

            # Pull the new image
            sudo docker pull gcr.io/${PROJECT_ID}/${IMAGE_NAME}:${GITHUB_SHA}

            # Stop and remove any old running containers
            sudo docker stop ${IMAGE_NAME} || true
            sudo docker rm ${IMAGE_NAME} || true

            # Run the new container, mapping port 5000 and removing it on exit
            sudo docker run -d --restart always --name ${IMAGE_NAME} -p 5000:5000 gcr.io/${PROJECT_ID}/${IMAGE_NAME}:${GITHUB_SHA}
          "
